class AfficheDecorator < Draper::Base
  decorates :affiche

  def link
    link_title = affiche.title if affiche.title.size > 45
    h.link_to affiche.title.truncate(45, :separator => ' '), h.affiche_path(affiche), :title => link_title
  end

  def place
    places = affiche.showings.map(&:place).uniq
    max_lenght = 45
    place_output = ""
    places.each_with_index do |place, index|
      place_title = place.is_a?(Organization) ? place.title : place
      place_title.gsub!(/,.*/, '')
      place_link_title = place_title if place_title.size > max_lenght
      place_title = place_title.truncate(max_lenght, :separator => ' ')
      max_lenght -= place_title.size
      place_output += place_link_title.blank? ? place_title : h.content_tag(:abbr, place_title, :title => place_link_title)
      break if max_lenght < 3
      place_output += ", " if index < places.size - 1
    end
    h.raw place_output
  end

  def poster
    p affiche.poster_url
    h.link_to h.image_tag_for(affiche.poster_url, 200, 268), h.affiche_path(affiche)
  end

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, attributes["created_at"].strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
end
